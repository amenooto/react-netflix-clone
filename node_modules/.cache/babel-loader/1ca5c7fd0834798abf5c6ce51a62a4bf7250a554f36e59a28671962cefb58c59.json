{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonholee/study/react-netfilx/src/components/Banner.js\",\n  _s = $RefreshSig$();\nimport axios from '../api/axios';\nimport React, { useState, useEffect } from 'react';\nimport requests from '../api/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Banner() {\n  _s();\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    /* \n        ko: 현재 상영중인 영화 정보를 가져오기(여러 영화)\n        ja: 現在上映中の映画情報を取得(複数)\n    */\n    const request = await axios.get(requests.fetchNowPlaying);\n\n    /* \n        ko: 여러 영화중 하나의 ID 가져오기\n        ja: 複数の映画の中で一つのID取得\n    */\n    const movieId = request.data.results[Math.floor(Math.random() * request.data.results.length)].id;\n\n    /* \n        ko: 특정 영화의 더 상세한 정보를 가져오기(비디오 정보 포함)\n        ja: 特定の映画のより詳細な情報を取得する（ビデオ情報を含む）\n    */\n    const {\n      data: movieDetail\n    } = await axios.get(`movie/${movieId}`, {\n      params: {\n        append_to_responce: 'videos'\n      }\n    });\n    setMovie(movieDetail);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Banner\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["axios","React","useState","useEffect","requests","Banner","movie","setMovie","fetchData","request","get","fetchNowPlaying","movieId","data","results","Math","floor","random","length","id","movieDetail","params","append_to_responce"],"sources":["/Users/hyeonholee/study/react-netfilx/src/components/Banner.js"],"sourcesContent":["import axios from '../api/axios';\nimport React, { useState, useEffect } from 'react';\nimport requests from '../api/requests';\n\nexport default function Banner() {\n    const [movie, setMovie] = useState([]);\n    \n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const fetchData = async () => {\n        /* \n            ko: 현재 상영중인 영화 정보를 가져오기(여러 영화)\n            ja: 現在上映中の映画情報を取得(複数)\n        */\n        const request = await axios.get(requests.fetchNowPlaying);\n        \n        /* \n            ko: 여러 영화중 하나의 ID 가져오기\n            ja: 複数の映画の中で一つのID取得\n        */\n        const movieId = request.data.results[\n            Math.floor(Math.random() * request.data.results.length)\n        ].id;\n\n        /* \n            ko: 특정 영화의 더 상세한 정보를 가져오기(비디오 정보 포함)\n            ja: 特定の映画のより詳細な情報を取得する（ビデオ情報を含む）\n        */\n        const { data: movieDetail } = await axios.get(`movie/${movieId}`, {\n            params: { append_to_responce: 'videos' },\n        });\n\n        setMovie(movieDetail);\n    }\n\n    return (\n    <div>Banner</div>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,iBAAiB;AAAC;AAEvC,eAAe,SAASC,MAAM,GAAG;EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZK,SAAS,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,YAAY;IAC1B;AACR;AACA;AACA;IACQ,MAAMC,OAAO,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACN,QAAQ,CAACO,eAAe,CAAC;;IAEzD;AACR;AACA;AACA;IACQ,MAAMC,OAAO,GAAGH,OAAO,CAACI,IAAI,CAACC,OAAO,CAChCC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGR,OAAO,CAACI,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CAC1D,CAACC,EAAE;;IAEJ;AACR;AACA;AACA;IACQ,MAAM;MAAEN,IAAI,EAAEO;IAAY,CAAC,GAAG,MAAMpB,KAAK,CAACU,GAAG,CAAE,SAAQE,OAAQ,EAAC,EAAE;MAC9DS,MAAM,EAAE;QAAEC,kBAAkB,EAAE;MAAS;IAC3C,CAAC,CAAC;IAEFf,QAAQ,CAACa,WAAW,CAAC;EACzB,CAAC;EAED,oBACA;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAiB;AAErB;AAAC,GApCuBf,MAAM;AAAA,KAANA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}